<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE stax SYSTEM "stax.dtd">

<stax>
<script>
	import re
	mcPath = 'C:\Users\Pascal\MC.jar'
	senderDir = 'C:\Users\Pascal\Sender'
	receiverDir = 'C:\Users\Pascal\Receiver'
	
	v4SenderRegex = re.compile('\[INFO]\[\d\d\.\d\d\.\d\d\d\d-\d\d:\d\d:\d\d]\ \t/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\t\d+\t/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\t\d+\t\d+\t\d+\t')
	v4ReceiverRegex = re.compile('\[INFO]\[\d\d\.\d\d\.\d\d\d\d-\d\d:\d\d:\d\d]\ \t/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\t\d+\tnull\t\d+\t\d+\t\d+\t')
	v6SenderRegex = re.compile('\[INFO]\[\d\d\.\d\d\.\d{4}-\d\d:\d\d:\d\d]\ \t/[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}\t\d+\t/[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}\t\d+\t\d+\t\d+\t')
	v6ReceiverRegex = re.compile('\[INFO]\[\d\d\.\d\d\.\d{4}-\d\d:\d\d:\d\d]\ \t/[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}:[0-9a-fA-F]{0,4}\t\d+\tnull\t\d+\t\d+\t\d+\t')
	
</script>
<defaultcall function="Tests"/>

<function name="Tests">
<sequence>
	<testcase name="'IGMP Test'">
		<sequence>
			<call function="'Clean'"/>
			<call function="'IGMP'"/>
			<script>
				Senderlog = open("%s/log.txt" % (senderDir))
				Senderlines = []
				while 1:
					line = Senderlog.readline()
					if not line:
						break
					Senderlines.append(line)
				
				Senderlog.close()		
				Receiverlog = open("%s/log.txt" % (receiverDir))
				Receiverlines = []
				while 1:
					line = Receiverlog.readline()
					if not line:
						break
					Receiverlines.append(line)
				
				Receiverlog.close()
				senderInfo = Senderlines[-1]
				receiverInfo = Receiverlines[-1]
				senderSend = 0
				receiverRecieved = 0
				pack = re.compile('\d+')
				m=v4SenderRegex.search(senderInfo)
				if m:
					senderInfo=senderInfo.replace(m.group(0), '')
					match = pack.search(senderInfo)
					senderSend = int(match.group(0))
				
				m=v4ReceiverRegex.search(receiverInfo)
				if m:
					receiverInfo=receiverInfo.replace(m.group(0), '')
					match = pack.search(receiverInfo)
					receiverRecieved = int(match.group(0))
				
				if receiverRecieved > 0 and senderSend > 0:
					RC = 0
					STAXResult = 'success received: %s send: %s' % (receiverRecieved, senderSend)
				elif (receiverRecieved == 0) and (senderSend == 0):
					RC = 1
					STAXResult = 'Receiver and Sender are 0'
				elif receiverRecieved == 0:
					RC = 1
					STAXResult = 'Receiver recieved 0 packets'
				elif (senderSend == 0):
					RC = 1
					STAXResult = 'Sender send 0 packets'
				
			</script>
	
			<if expr="RC != 0">
				<sequence>
				<message>'Error: RC=%s, STAXResult=%s' % (RC, STAXResult)</message>
				<tcstatus result="'fail'"/>
				</sequence>
			<else>
				<sequence>
				<tcstatus result="'pass'"/>
				<message>'Process RC was 0. STAXResult=%s' % STAXResult</message>
				</sequence>
			</else>
			</if>

		</sequence>
	</testcase>
	<testcase name="'MLD Test'">
		<sequence>
			<call function="'Clean'"/>
			<call function="'MLD'"/>
			<script>
					Senderlog = open("%s/log.txt" % (senderDir))
					Senderlines = []
					while 1:
						line = Senderlog.readline()
						if not line:
							break
						Senderlines.append(line)
					
					Senderlog.close()		
					Receiverlog = open("%s/log.txt" % (receiverDir))
					Receiverlines = []
					while 1:
						line = Receiverlog.readline()
						if not line:
							break
						Receiverlines.append(line)
					
					Receiverlog.close()
					senderInfo = Senderlines[-1]
					receiverInfo = Receiverlines[-1]
					senderSend = 0
					receiverRecieved = 0
					pack = re.compile('\d+')
					m=v6SenderRegex.search(senderInfo)
					if m:
						senderInfo=senderInfo.replace(m.group(0), '')
						match = pack.search(senderInfo)
						senderSend = int(match.group(0))
					
					m=v6ReceiverRegex.search(receiverInfo)
					if m:
						receiverInfo=receiverInfo.replace(m.group(0), '')
						match = pack.search(receiverInfo)
						receiverRecieved = int(match.group(0))
					
					if receiverRecieved > 0 and senderSend > 0:
						RC = 0
						STAXResult = 'success received: %s send: %s' % (receiverRecieved, senderSend)
					elif (receiverRecieved == 0) and (senderSend == 0):
						RC = 1
						STAXResult = 'Receiver and Sender are 0'
					elif receiverRecieved == 0:
						RC = 1
						STAXResult = 'Receiver recieved 0 packets'
					elif (senderSend == 0):
						RC = 1
						STAXResult = 'Sender send 0 packets'
				
			</script>
	
			<if expr="RC != 0">
				<sequence>
				<message>'Error: RC=%s, STAXResult=%s' % (RC, STAXResult)</message>
				<tcstatus result="'fail'"/>
				</sequence>
			<else>
				<sequence>
				<tcstatus result="'pass'"/>
				<message>'Process RC was 0. STAXResult=%s' % STAXResult</message>
				</sequence>
			</else>
			</if>
		</sequence>
	</testcase>
	</sequence>
</function>

<function name="IGMP">
	<timer duration="'37s'">
		<parallel>
		<process name="'Sender'">
			<location>'local'</location>
			<command>
			'java -jar %s -g s sender.xml' % mcPath
			</command>
			<workdir>senderDir</workdir>
			<stopusing>'WM_CLOSE'</stopusing>
			<stderr mode="'stdout'"/>
			<returnstdout/>
		</process>
		<sequence>
		<timer duration="'3s'">
			<stafcmd name="'DELAY'">
			<location>'local'</location>
			<service>'DELAY'</service>
			<request>'DELAY 3000'</request>
			</stafcmd>
		</timer>		
		<process name="'Receiver'">
			<location>'local'</location>
			<command>
			'java -jar %s -g r receiver.xml' % mcPath
			</command>
			<workdir>receiverDir</workdir>
			<stopusing>'WM_CLOSE'</stopusing>
			<stderr mode="'stdout'"/>
			<returnstdout/>
		</process>
		</sequence>
		</parallel>
	</timer>
</function>

<function name="analysisv4">
	<script>
		Senderlog = open("%s/log.txt" % (senderDir))
		Senderlines = []
		while 1:
			line = Senderlog.readline()
			if not line:
				break
			Senderlines.append(line)
		
		Senderlog.close()		
		Receiverlog = open("%s/log.txt" % (receiverDir))
		Receiverlines = []
		while 1:
			line = Receiverlog.readline()
			if not line:
				break
			Receiverlines.append(line)
		
		Receiverlog.close()
		senderInfo = Senderlines[-1]
		receiverInfo = Receiverlines[-1]
		senderSend = 0
		receiverRecieved = 0
		pack = re.compile('\d+')
		m=v4SenderRegex.search(senderInfo)
		if m:
			senderInfo=senderInfo.replace(m.group(0), '')
			match = pack.search(senderInfo)
			senderSend = int(match.group(0))
		
		m=v4ReceiverRegex.search(receiverInfo)
		if m:
			receiverInfo=receiverInfo.replace(m.group(0), '')
			match = pack.search(receiverInfo)
			receiverRecieved = int(match.group(0))
		
		if receiverRecieved > 0 and senderSend > 0:
			RC = 0
			STAXResult = 'success received: %s send: %s' % (receiverRecieved, senderSend)
		elif (receiverRecieved == 0) and (senderSend == 0):
			RC = 1
			STAXResult = ''
		elif receiverRecieved == 0:
			RC = 1
			STAXResult = ''
		elif (senderSend == 0):
			RC = 1
			STAXResult = ''
		
	</script>
</function>

<function name="analysisv6">
	<script>
		Senderlog = open("%s/log.txt" % (senderDir))
		Senderlines = []
		while 1:
			line = Senderlog.readline()
			if not line:
				break
			Senderlines.append(line)
		
		Senderlog.close()		
		Receiverlog = open("%s/log.txt" % (receiverDir))
		Receiverlines = []
		while 1:
			line = Receiverlog.readline()
			if not line:
				break
			Receiverlines.append(line)
		
		Receiverlog.close()
		senderInfo = Senderlines[-1]
		receiverInfo = Receiverlines[-1]
		senderSend = 0
		receiverRecieved = 0
		pack = re.compile('\d+')
		m=v6SenderRegex.search(senderInfo)
		if m:
			senderInfo=senderInfo.replace(m.group(0), '')
			match = pack.search(senderInfo)
			senderSend = int(match.group(0))
		
		m=v6ReceiverRegex.search(receiverInfo)
		if m:
			receiverInfo=receiverInfo.replace(m.group(0), '')
			match = pack.search(receiverInfo)
			receiverRecieved = int(match.group(0))
		
		if receiverRecieved > 0 and senderSend > 0:
			RC = 0
			STAXResult = 'success received: %s send: %s' % (receiverRecieved, senderSend)
		elif (receiverRecieved == 0) and (senderSend == 0):
			RC = 1
			STAXResult = ''
		elif receiverRecieved == 0:
			RC = 1
			STAXResult = ''
		elif (senderSend == 0):
			RC = 1
			STAXResult = ''
		
	</script>
</function>

<function name="MLD">
	<sequence>
		<call function="'Clean'"/>
		<timer duration="'37s'">
		<parallel>
			<process name="'Sender'">
				<location>'local'</location>
				<command>
				'java -jar %s -g s senderv6.xml' % (mcPath)
				</command>
				<workdir>senderDir</workdir>
				<stopusing>'WM_CLOSE'</stopusing>
				<stderr mode="'stdout'"/>
				<returnstdout/>
			</process>
			<sequence>
			<timer duration="'3s'">
				<stafcmd name="'DELAY'">
				<location>'local'</location>
				<service>'DELAY'</service>
				<request>'DELAY 3000'</request>
				</stafcmd>
			</timer>		
			<process name="'Receiver'">
				<location>'local'</location>
				<command>
				'java -jar %s -g r receiverv6.xml' % (mcPath)
				</command>
				<workdir>receiverDir</workdir>
				<stopusing>'WM_CLOSE'</stopusing>
				<stderr mode="'stdout'"/>
				<returnstdout/>
			</process>
			</sequence>
			</parallel>
		</timer>
	</sequence>
</function>

<function name="Clean">
	<sequence>
		<stafcmd name="'CLEANUP Receiver'">
				<location>'local'</location>
				<service>'FS'</service>
				<request>'DELETE ENTRY %s\log.txt CONFIRM' % (receiverDir)</request>
		</stafcmd>
		<stafcmd name="'CLEANUP Sender'">
				<location>'local'</location>
				<service>'FS'</service>
				<request>'DELETE ENTRY %s\log.txt CONFIRM' % (senderDir)</request>
		</stafcmd>
	</sequence>
</function>

</stax>
